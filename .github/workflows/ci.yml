name: CI & Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Semver increment (patch, minor, major, prerelease, from-git)'
        type: choice
        default: patch
        options: [patch, minor, major, prerelease, from-git]
      preid:
        description: 'Pre-release identifier (e.g., rc, beta)'
        type: string
        required: false
      commit_sha:
        description: 'Commit SHA to release (defaults to HEAD of main)'
        type: string
        required: false
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    # ✅ CHANGE: Renamed from lint/test to a single validation stage
    runs-on: ubuntu-latest
    name: Validate (Lint, Test)
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint:check
      - run: pnpm run format:check
      - run: pnpm run typecheck
      - run: pnpm run typecheck:tests
      - run: pnpm run test:coverage
      - uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

  build_and_pack:
    # ✅ CHANGE: This job now builds AND creates the final package artifact
    runs-on: ubuntu-latest
    name: Build & Pack
    needs: [validate]
    # ✅ CHANGE: Only run on main branch pushes to create release candidates
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - name: Pack tarball
        run: pnpm pack --pack-destination ./artifact
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: ./artifact/*.tgz
          retention-days: 30

  release:
    # ✅ CHANGE: This job is now extremely lightweight
    runs-on: ubuntu-latest
    name: Release
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      id-token: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_sha || 'main' }}
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: https://registry.npmjs.org/

      # ✅ CHANGE: Only install dependencies needed for release-it
      - run: pnpm install --frozen-lockfile

      - name: Download package artifact
        id: download
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ci.yml
          commit: ${{ github.event.inputs.commit_sha || github.sha }}
          name: package-${{ github.event.inputs.commit_sha || github.sha }}
          path: ./release-package
          workflow_conclusion: success

      # ✅ CHANGE: release-it now publishes the downloaded tarball
      - name: Release with release-it
        run: |
          PACKAGE_PATH=$(find ./release-package -name "*.tgz")
          if [ -z "$PACKAGE_PATH" ]; then
            echo "Error: Package tarball not found."
            exit 1
          fi
          echo "Package to publish: $PACKAGE_PATH"

          # release-it will handle git tag, commit, GitHub Release,
          # and then call `npm publish` on the tarball.
          pnpm release-it --ci \
            --increment ${{ github.event.inputs.release_type || 'patch' }} \
            --npm.publishPath=$PACKAGE_PATH \
            ${{ github.event.inputs.preid && format('--preRelease {0}', github.event.inputs.preid) || '' }} \
            ${{ github.event.inputs.commit_sha && '--git.requireBranch=' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_CONFIG_PROVENANCE: true